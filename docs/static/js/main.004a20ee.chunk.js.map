{"version":3,"sources":["AppAllUsers.js","AppComments.js","services.js","AppPosts.js","AppPreNext.js","AppAllPosts.js","App.js","serviceWorker.js","index.js"],"names":["AppAllUsers","props","state","users","fetch","then","response","json","setState","userDivs","userDiv","i","this","length","user","key","style","font","id","name","email","push","className","React","Component","AppComments","margin","padding","border","color","comment","body","services","usersMap","getUser","userId","callback","undefined","console","log","localStorage","getItem","JSON","parse","setItem","stringify","getPosts","posts","getPostsFromUser","getComments","postId","comments","AppPosts","setUserCallback","bind","setCommentsCallback","post","commentsRows","commentRow","Uid","AppPreNext","currentPostIndex","testF","increaseIndex","decreaseIndex","data","Date","postDiv","Button","variant","onClick","disabled","Jumbotron","AppAllPosts","line","change","str","postsDivs","includes","type","onChange","e","target","value","App","Nav","activeKey","Item","Link","href","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SA2CeA,E,YAvCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,IAHQ,E,iFAOE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAF,GACJ,EAAKK,SAAS,CAAEL,MAAOA,S,+BAO3B,IAFA,IAAIM,EAAW,GACXC,EAAU,KACLC,EAAI,EAAGA,EAAIC,KAAKV,MAAMC,MAAMU,OAAQF,IAAK,CAChD,IAAIG,EAAOF,KAAKV,MAAMC,MAAMQ,GAC5BD,EACE,yBAAKK,IAAK,WAAaJ,GACrB,uBAAGK,MAAO,CAAEC,KAAM,UAChB,2BAAIH,EAAKI,IACT,6BACA,6BACCJ,EAAKK,KAJR,IAIe,IAAML,EAAKM,MAAQ,IAChC,8BAEF,8BAGJX,EAASY,KAAKX,GAGhB,OAAO,yBAAKY,UAAU,SAASb,O,GApCTc,IAAMC,W,QCgBjBC,E,iLAfP,OAAS,yBACDT,MACA,CAAEU,OAAQ,OAAQC,QAAS,OAAQC,OAAQ,mBAC/C,uBAAGZ,MACC,CAAEa,MAAO,QADb,IAC2BjB,KAAKX,MAAM6B,QAAQX,KAD9C,IACuDP,KAAKX,MAAM6B,QAAQV,MAD1E,KAGA,6BACA,2BACRR,KAAKX,MAAM8B,W,GAVWR,IAAMC,WCF5BQ,EAAW,CAEdC,SAAU,GAEVC,QAAS,SAASC,EAAQC,GACzB,QAAiCC,IAA9BL,EAASC,SAASE,GAGpB,OAFAG,QAAQC,IAAI,iCACZH,EAASJ,EAASC,SAASE,IAG5B,QAAoBE,IAAjBG,aAA2B,CAC7B,IAAI1B,EAAO0B,aAAaC,QAAQ,QAAUN,GAC1C,GAAGrB,EAKF,OAJAwB,QAAQC,IAAI,oCACZzB,EAAO4B,KAAKC,MAAM7B,GACZkB,EAASC,SAASE,GAAUrB,OAClCsB,EAAUtB,GAIZwB,QAAQC,IAAI,iBAAmBJ,GAC/B/B,MACC,8CAAgD+B,GAC1C9B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAS,GACJkB,EAASC,SAASE,GAAUrB,OACduB,IAAjBG,cACIA,aAAaI,QAAQ,QAAST,EAAQO,KAAKG,UAAU/B,IAEtDsB,EAAStB,OAKlBgC,SAAU,SAASV,GAClBhC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAC0C,GACPX,EAASW,OAIZC,iBAAkB,SAASb,EAAQC,GAClChC,MAAM,qDAAqD+B,GACxD9B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAC0C,GACPX,EAASW,OAIZE,YAAa,SAASC,EAAQd,GAC7BE,QAAQC,IAAI,qBAAuBW,GAEnC9C,MACC,wDAA0D8C,GACpD7C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA8C,GACJf,EAASe,QAMJnB,ICSAoB,E,YAjEb,WAAYnD,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXY,UAAMuB,EACNc,SAAU,IAEZ,EAAKE,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,oBAAsB,EAAKA,oBAAoBD,KAAzB,gBAPV,E,6EAUHxC,GACdF,KAAKJ,SAAS,CAAEM,KAAMA,M,0CAGJqC,GAClBvC,KAAKJ,SAAS,CAAE2C,SAAUA,M,0CAI1BnB,EAASE,QAAQtB,KAAKX,MAAMuD,KAAKrB,OAAQvB,KAAKyC,iBAC9CrB,EAASiB,YAAYrC,KAAKX,MAAMiD,OAAQtC,KAAK2C,uB,+BAK7C,IADA,IAAIE,EAAe,GACV9C,EAAI,EAAGA,EAAIC,KAAKV,MAAMiD,SAAStC,OAAQF,IAAK,CACnD,IAAImB,EAAUlB,KAAKV,MAAMiD,SAASxC,GAC9B+C,EACF,kBAAC,EAAD,CACEC,IAAK7B,EAAQZ,GACbH,IAAKe,EAAQZ,GACbY,QAASA,EACTC,KAAMD,EAAQC,OAGlB0B,EAAapC,KAAKqC,GAGpB,IAAIhD,EAAU,KAYd,OAXIE,KAAKV,MAAMY,OACbJ,EACE,uBAAGM,MAAO,CAAEC,KAAM,UAChB,2BACGL,KAAKX,MAAMuD,KAAKtC,GADnB,IACwBN,KAAKV,MAAMY,KAAKK,KACrC,IAAMP,KAAKV,MAAMY,KAAKM,MAAQ,OAOrC,yBAAKE,UAAW,SACbZ,EACD,uBAAGM,MAAO,CAAEC,KAAM,UAChB,2BAAIL,KAAKX,MAAM8B,OAEjB,6BACA,6BACA,6BACC0B,O,GA5DclC,IAAMC,W,gBCiFdoC,E,YAhFb,WAAY3D,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACX6C,MAAO,GACPc,iBAAkB,GAEpB,EAAKC,MAAQ,EAAKA,MAAMR,KAAX,gBACb,EAAKS,cAAgB,EAAKA,cAAcT,KAAnB,gBACrB,EAAKU,cAAgB,EAAKA,cAAcV,KAAnB,gBARJ,E,6EAWjB,IAAI3C,EAAIC,KAAKV,MAAM2D,iBACnBjD,KAAKJ,SAAS,CAAEqD,iBAAkBlD,EAAI,M,sCAGtC,IAAIA,EAAIC,KAAKV,MAAM2D,iBACflD,EAAI,GAGRC,KAAKJ,SAAS,CAAEqD,iBAAkBlD,EAAI,M,4BAElCsD,GACJ3B,QAAQC,IAAI,gBACZD,QAAQC,IAAI0B,K,0CAGO,IAAD,OAClB7D,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA0C,GACJ,EAAKvC,SAAS,CAAEuC,e,+BAIZ,IAAD,OACPT,QAAQC,IACN,sBAAwB3B,KAAKV,MAAM6C,MAAMlC,OAAS,OAAS,IAAIqD,MAIjE,IAAIC,EAAU,KAEd,GACEvD,KAAKV,MAAM6C,MAAMlC,OAAS,GAC1BD,KAAKV,MAAM6C,MAAMlC,OAASD,KAAKV,MAAM2D,kBACrCjD,KAAKV,MAAM2D,kBAAoB,EAC/B,CACA,IAAIL,EAAO5C,KAAKV,MAAM6C,MAAMnC,KAAKV,MAAM2D,kBACvCM,EACE,kBAAC,EAAD,CACEpD,IAAKyC,EAAKtC,GACVyC,IAAKH,EAAKrB,OACVe,OAAQM,EAAKtC,GACbsC,KAAMA,EACNzB,KAAMyB,EAAKzB,OAKjB,OACE,yBAAKT,UAAU,OACb,kBAAC8C,EAAA,EAAD,CACEC,QAJc,UAKdC,QAAS,kBAAM,EAAKN,iBACpBO,SAA0C,IAAhC3D,KAAKV,MAAM2D,kBAHvB,QADF,OASE,kBAACO,EAAA,EAAD,CAAQC,QAXQ,UAWgBC,QAAS,kBAAM,EAAKP,kBAApD,QAGA,6BACA,6BACA,kBAACS,EAAA,EAAD,KAAYL,Q,GA3EK5C,IAAMC,WC2DhBiD,E,YA3Db,WAAYxE,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACX6C,MAAO,GACP2B,KAAM,IAER,EAAKZ,MAAQ,EAAKA,MAAMR,KAAX,gBACb,EAAKqB,OAAS,EAAKA,OAAOrB,KAAZ,gBAPG,E,oEAUZsB,GACLhE,KAAKJ,SAAS,CAAEkE,KAAME,M,4BAGlBX,GACJ3B,QAAQC,IAAI,gBACZD,QAAQC,IAAI0B,K,0CAGO,IAAD,OAClB7D,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA0C,GACJ,EAAKvC,SAAS,CAAEuC,MAAOA,S,+BAS3B,IALQ,IAAD,OACH8B,EAAY,GAEZV,EAAU,KAELxD,EAAI,EAAGA,EAAIC,KAAKV,MAAM6C,MAAMlC,OAAQF,IAAK,CAChD,IAAI6C,EAAO5C,KAAKV,MAAM6C,MAAMpC,GACvB6C,EAAKzB,KAAK+C,SAASlE,KAAKV,MAAMwE,QAInCP,EACE,kBAAC,EAAD,CACEpD,IAAKyC,EAAKtC,GACVgC,OAAQM,EAAKtC,GACbyC,IAAKH,EAAKrB,OACVqB,KAAMA,EACNzB,KAAMyB,EAAKzB,OAGf8C,EAAUxD,KAAK8C,IAGjB,OACE,yBAAK7C,UAAU,OACb,2BAAOyD,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAI,EAAKN,OAAOM,EAAEC,OAAOC,UACtDN,EAAUhE,OAFb,IAEqB,6BAFrB,IAE6BgE,O,GAtDTtD,IAAMC,WCyCjB4D,E,iLAlCX,OACE,kBAAC,IAAD,KAGE,yBAAK9D,UAAU,YACb,kBAAC+D,EAAA,EAAD,CAAKC,UAAU,IACb,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUC,KAAK,QAAf,SAEF,kBAACJ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUC,KAAK,aAAf,cAEF,kBAACJ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUC,KAAK,aAAf,gBAGJ,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,c,GA3BIpE,IAAMC,WCEJoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlG,MAAK,SAAAmG,GACjCA,EAAaC,kB","file":"static/js/main.004a20ee.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass AppAllUsers extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => {\n        this.setState({ users: users });\n      });\n  }\n\n  render() {\n    let userDivs = [];\n    let userDiv = null;\n    for (let i = 0; i < this.state.users.length; i++) {\n      let user = this.state.users[i];\n      userDiv = (\n        <div key={\"userDiv:\" + i}>\n          <p style={{ font: \"Arial\" }}>\n            <i>{user.id}</i>\n            <br />\n            <br />\n            {user.name} {\"(\" + user.email + \")\"}\n            <br />\n          </p>\n          <hr></hr>\n        </div>\n      );\n      userDivs.push(userDiv);\n    }\n\n    return <div className=\"posts\">{userDivs}</div>;\n  }\n}\n\nexport default AppAllUsers;\n","import React from \"react\";\n\nclass AppComments extends React.Component {\n    render() {\n        return ( <\n            div style = {\n                { margin: \"10px\", padding: \"10px\", border: \"1px dashed red\" } } >\n            <p style = {\n                { color: \"red\" } } > { this.props.comment.name }({ this.props.comment.email }) \n\t    </p>\n            <br/>\n            <p>\n\t\t {this.props.body} \n            </p>\n\t    </div>\n        );\n    }\n}\n\nexport default AppComments;\n","var services = {\n\n\tusersMap: {},\n\t\n\tgetUser: function(userId, callback){\n\t\tif(services.usersMap[userId] !== undefined){\n\t\t\tconsole.log(\"Returing user from cache\");\n\t\t\tcallback(services.usersMap[userId]);\n\t\t\treturn;\n\t\t}\n\t\tif(localStorage !== undefined){\n\t\t\tlet user = localStorage.getItem(\"user:\" + userId);\n\t\t\tif(user){\n\t\t\t\tconsole.log(\"Returing user from browser cache\");\n\t\t\t\tuser = JSON.parse(user);\n        \t\tservices.usersMap[userId] = user; \n\t\t\t\tcallback( user );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tconsole.log(\"fetching user \" + userId);\n\t\tfetch(\n\t\t\t\"https://jsonplaceholder.typicode.com/users/\" + userId)\n        .then(response => response.json())\n        .then(user => {\n        \t\tservices.usersMap[userId] = user; \n\t\t\t\tif(localStorage !== undefined){\n\t        \t\tlocalStorage.setItem(\"user:\"+ userId, JSON.stringify(user) );\n\t        \t}\n        \t\tcallback(user);\n        \t});\n\n\t},\n\t\n\tgetPosts: function(callback){\n\t\tfetch('https://jsonplaceholder.typicode.com/posts')\n\t\t  .then(response => response.json())\n\t\t  .then((posts)=>{\n\t\t\t\tcallback(posts);\n\t\t\t});\n\t},\n\t\n\tgetPostsFromUser: function(userId, callback){\n\t\tfetch('https://jsonplaceholder.typicode.com/posts?userId='+userId)\n\t\t  .then(response => response.json())\n\t\t  .then((posts)=>{\n\t\t\t\tcallback(posts);\n\t\t\t});\n\t},\n\t\n\tgetComments: function(postId, callback){\n\t\tconsole.log(\"fetching comments \" + postId);\n\t\t\n\t\tfetch(\n\t\t\t\"https://jsonplaceholder.typicode.com/comments?postId=\" + postId)\n        .then(response => response.json())\n        .then(comments => {\n        \t\tcallback(comments); \n        \t});\n\t},\n\n};\n\nexport default services;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport AppComments from \"./AppComments.js\";\nimport services from \"./services.js\";\n\nclass AppPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: undefined,\n      comments: []\n    };\n    this.setUserCallback = this.setUserCallback.bind(this);\n    this.setCommentsCallback = this.setCommentsCallback.bind(this);\n  }\n\n  setUserCallback(user) {\n    this.setState({ user: user });\n  }\n\n  setCommentsCallback(comments) {\n    this.setState({ comments: comments });\n  }\n\n  componentDidMount() {\n    services.getUser(this.props.post.userId, this.setUserCallback);\n    services.getComments(this.props.postId, this.setCommentsCallback);\n  }\n\n  render() {\n    let commentsRows = [];\n    for (let i = 0; i < this.state.comments.length; i++) {\n      let comment = this.state.comments[i];\n      let commentRow = (\n        <AppComments\n          Uid={comment.id}\n          key={comment.id}\n          comment={comment}\n          body={comment.body}\n        />\n      );\n      commentsRows.push(commentRow);\n    }\n\n    let userDiv = null;\n    if (this.state.user) {\n      userDiv = (\n        <p style={{ font: \"Arial\" }}>\n          <i>\n            {this.props.post.id} {this.state.user.name}\n            {\"(\" + this.state.user.email + \")\"}\n          </i>\n        </p>\n      );\n    }\n\n    return (\n      <div className={\"posts\"}>\n        {userDiv}\n        <p style={{ font: \"Arial\" }}>\n          <i>{this.props.body}</i>\n        </p>\n        <br />\n        <hr />\n        <br />\n        {commentsRows}\n      </div>\n    );\n  }\n}\n\nexport default AppPosts;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport AppPosts from \"./AppPosts.js\";\nimport { Jumbotron, Button } from \"react-bootstrap\";\n\nclass AppPreNext extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      currentPostIndex: 0\n    };\n    this.testF = this.testF.bind(this);\n    this.increaseIndex = this.increaseIndex.bind(this);\n    this.decreaseIndex = this.decreaseIndex.bind(this);\n  }\n  increaseIndex() {\n    let i = this.state.currentPostIndex;\n    this.setState({ currentPostIndex: i + 1 });\n  }\n  decreaseIndex() {\n    let i = this.state.currentPostIndex;\n    if (i < 1) {\n      return;\n    }\n    this.setState({ currentPostIndex: i - 1 });\n  }\n  testF(data) {\n    console.log(\"testF called\");\n    console.log(data);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\n      .then(response => response.json())\n      .then(posts => {\n        this.setState({ posts });\n      });\n  }\n\n  render() {\n    console.log(\n      \"render users count:\" + this.state.posts.length + \" ==>\" + new Date()\n    );\n    // let postsDivs = [];\n\n    let postDiv = null;\n\n    if (\n      this.state.posts.length > 0 &&\n      this.state.posts.length > this.state.currentPostIndex &&\n      this.state.currentPostIndex >= 0\n    ) {\n      let post = this.state.posts[this.state.currentPostIndex];\n      postDiv = (\n        <AppPosts\n          key={post.id}\n          Uid={post.userId}\n          postId={post.id}\n          post={post}\n          body={post.body}\n        />\n      );\n    }\n    let buttonVariant = \"primary\";\n    return (\n      <div className=\"App\">\n        <Button\n          variant={buttonVariant}\n          onClick={() => this.decreaseIndex()}\n          disabled={this.state.currentPostIndex === 0}\n        >\n          prev\n        </Button>\n        &nbsp;\n        <Button variant={buttonVariant} onClick={() => this.increaseIndex()}>\n          next\n        </Button>\n        <br />\n        <br />\n        <Jumbotron>{postDiv}</Jumbotron>\n      </div>\n    );\n  }\n}\n\nexport default AppPreNext;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport AppPosts from \"./AppPosts.js\";\n\nclass AppAllPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      line: \"\"\n    };\n    this.testF = this.testF.bind(this);\n    this.change = this.change.bind(this);\n  }\n\n  change(str) {\n    this.setState({ line: str });\n  }\n\n  testF(data) {\n    console.log(\"testF called\");\n    console.log(data);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\n      .then(response => response.json())\n      .then(posts => {\n        this.setState({ posts: posts });\n      });\n  }\n\n  render() {\n    let postsDivs = [];\n\n    let postDiv = null;\n\n    for (let i = 0; i < this.state.posts.length; i++) {\n      let post = this.state.posts[i];\n      if (!post.body.includes(this.state.line)) {\n        continue;\n      }\n      // console.log(user);\n      postDiv = (\n        <AppPosts\n          key={post.id}\n          postId={post.id}\n          Uid={post.userId}\n          post={post}\n          body={post.body}\n        />\n      );\n      postsDivs.push(postDiv);\n    }\n\n    return (\n      <div className=\"App\">\n        <input type=\"text\" onChange={e => this.change(e.target.value)} />\n        {postsDivs.length} <br /> {postsDivs}\n      </div>\n    );\n  }\n}\n\nexport default AppAllPosts;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Nav } from \"react-bootstrap\";\nimport AppAllUsers from \"./AppAllUsers.js\";\nimport AppPreNext from \"./AppPreNext.js\";\nimport AppAllPosts from \"./AppAllPosts\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router \n      // basename=\"json-placeholder-react-sample\"\n      >\n        <div className=\"AppStyle\">\n          <Nav activeKey=\"\">\n            <Nav.Item>\n              <Nav.Link href=\"./#/\">Home</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"./#/posts\">All Posts</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"./#/users\"> All users</Nav.Link>\n            </Nav.Item>\n          </Nav>\n          <hr />\n          <Switch>\n            <Route exact path=\"/\">\n              <AppPreNext />\n            </Route>\n            <Route path=\"/posts\">\n              <AppAllPosts />\n            </Route>\n            <Route path=\"/users\">\n              <AppAllUsers />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}